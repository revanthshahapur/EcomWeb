// js/categories.js

// --- Configuration ---
const API_BASE_URL = 'http://localhost:8080/api/categories'; // Your Spring Boot backend API endpoint

// --- DOM Element References (Ensure these IDs exist in your HTML) ---
const categoriesTableBody = document.querySelector('#categoriesTable tbody');
const addCategoryModal = document.getElementById('addCategoryModal');
const editCategoryModal = document.getElementById('editCategoryModal');
const saveCategoryBtn = document.getElementById('saveCategoryBtn');
const updateCategoryBtn = document.getElementById('updateCategoryBtn');
const alertContainer = document.getElementById('alertContainer');

// Add Category Modal Fields
const categoryNameInput = document.getElementById('categoryName');
const categorySlugInput = document.getElementById('categorySlug');
const categoryDescriptionInput = document.getElementById('categoryDescription');
const categoryStatusSelect = document.getElementById('categoryStatus');

// Edit Category Modal Fields
const editCategoryIdInput = document.getElementById('editCategoryId');
const editCategoryNameInput = document.getElementById('editCategoryName');
const editCategorySlugInput = document.getElementById('editCategorySlug');
const editCategoryDescriptionInput = document.getElementById('editCategoryDescription');
const editCategoryStatusSelect = document.getElementById('editCategoryStatus');

// --- Event Listeners ---
document.addEventListener('DOMContentLoaded', function() {
    // Initial load of categories table
    loadCategories();

    // Search functionality (client-side filtering of already fetched data)
    // IGNORED: Commented out the category search input listener
    // const categorySearchInput = document.getElementById('categorySearch');
    // if (categorySearchInput) { // Added a check in case you want to uncomment later
    //     categorySearchInput.addEventListener('input', function() {
    //         // Re-render table with filtered data. Full data needs to be available.
    //         // For large datasets, consider making this a backend API call.
    //         // For now, loadCategories will fetch all, and this will filter that in memory.
    //         loadCategories(this.value);
    //     });
    // } else {
    //     console.warn("Element with ID 'categorySearch' not found. Search functionality will be disabled.");
    // }

    // Save category button click for Add Category Modal
    saveCategoryBtn.addEventListener('click', saveCategory);

    // Update category button click for Edit Category Modal
    updateCategoryBtn.addEventListener('click', updateCategory);

    // Generate slug from name for Add Category Modal
    categoryNameInput.addEventListener('input', function() {
        const slug = generateSlug(this.value);
        categorySlugInput.value = slug;
    });

    // Generate slug from name for Edit Category Modal
    editCategoryNameInput.addEventListener('input', function() {
        const slug = generateSlug(this.value);
        editCategorySlugInput.value = slug;
    });

    // Modal Close Buttons (assuming .close class for modal close spans)
    document.querySelectorAll('.modal .close').forEach(closeBtn => {
        closeBtn.addEventListener('click', () => {
            addCategoryModal.style.display = 'none';
            editCategoryModal.style.display = 'none';
        });
    });

    // Open Add Category Modal (triggered by "Add Category" button)
    // Assuming your "Add Category" button has data-toggle="modal" and data-target="#addCategoryModal"
    // We'll also explicitly add a listener here to ensure form reset and status default.
    document.querySelector('[data-target="#addCategoryModal"]').addEventListener('click', () => {
        addCategoryModal.style.display = 'block';
        document.getElementById('addCategoryForm').reset();
        categoryStatusSelect.value = 'Active'; // Set default status for new category
        categorySlugInput.value = ''; // Clear slug as it will be auto-generated by backend if left empty
    });

    // Close modals if clicking outside (optional, but good UX)
    window.addEventListener('click', (event) => {
        if (event.target === addCategoryModal) {
            addCategoryModal.style.display = 'none';
        }
        if (event.target === editCategoryModal) {
            editCategoryModal.style.display = 'none';
        }
    });
});

// --- Core Functions (Backend Interaction) ---

// Fetches all categories and displays them in the table
async function loadCategories(searchTerm = '') {
    try {
        const token = localStorage.getItem('adminToken'); // Get token for auth
        if (!token) {
            showAlert('Authentication token not found. Please log in.', 'danger');
            return;
        }

        const response = await fetch(`${API_BASE_URL}/admin/all`, { // Endpoint for all categories (admin view)
            headers: {
                'Authorization': `Bearer ${token}` // Include JWT token
            }
        });

        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`Failed to fetch categories: ${response.status} - ${errorText}`);
        }
        const allCategories = await response.json();

        // Filter categories based on search term (client-side)
        // If category search input is ignored, searchTerm will always be empty, effectively showing all.
        const filteredCategories = allCategories.filter(category => {
            return searchTerm === '' ||
                category.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                category.slug.toLowerCase().includes(searchTerm.toLowerCase());
        });

        renderCategoriesTable(filteredCategories);

    } catch (error) {
        console.error('Error loading categories:', error);
        showAlert(`Error loading categories: ${error.message}`, 'danger');
        categoriesTableBody.innerHTML = '<tr><td colspan="5" style="text-align: center; color: red;">Failed to load categories.</td></tr>';
    }
}

// Renders categories into the HTML table
function renderCategoriesTable(categories) {
    categoriesTableBody.innerHTML = ''; // Clear existing rows

    if (categories.length === 0) {
        categoriesTableBody.innerHTML = '<tr><td colspan="5" style="text-align: center;">No categories found.</td></tr>';
        return;
    }

    categories.forEach(category => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${category.id}</td>
            <td>${category.name}</td>
            <td>${category.slug}</td>
            <td><span class="status ${category.status.toLowerCase()}">${category.status}</span></td>
            <td>
                <button class="btn btn-primary btn-sm edit-btn" data-id="${category.id}"><i class="fas fa-edit"></i> Edit</button>
                <button class="btn btn-danger btn-sm delete-btn" data-id="${category.id}"><i class="fas fa-trash"></i> Delete</button>
            </td>
        `;
        categoriesTableBody.appendChild(row);
    });

    // Attach event listeners to newly created buttons
    document.querySelectorAll('.edit-btn').forEach(button => {
        button.addEventListener('click', function() {
            editCategory(this.getAttribute('data-id'));
        });
    });

    document.querySelectorAll('.delete-btn').forEach(button => {
        button.addEventListener('click', function() {
            deleteCategory(this.getAttribute('data-id'));
        });
    });
}

// Saves a new category to the backend
async function saveCategory() {
    const name = categoryNameInput.value.trim();
    const slug = categorySlugInput.value.trim();
    const description = categoryDescriptionInput.value.trim();
    const status = categoryStatusSelect.value; // 'Active' or 'Inactive' from HTML select

    if (!name) {
        showAlert('Category Name is required.', 'danger');
        return;
    }

    // Prepare data payload for backend
    const categoryData = {
        name: name,
        slug: slug || null, // Send null if slug is empty, backend will generate
        description: description,
        status: status // Already in correct casing from HTML select options
    };

    try {
        const token = localStorage.getItem('adminToken'); // Get token for auth
        const response = await fetch(`${API_BASE_URL}/admin`, { // POST endpoint for creating category
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}` // Include JWT token
            },
            body: JSON.stringify(categoryData)
        });

        if (response.ok) {
            const newCategory = await response.json();
            showAlert(`Category "${newCategory.name}" added successfully!`, 'success');
            addCategoryModal.style.display = 'none'; // Close modal
            document.getElementById('addCategoryForm').reset(); // Clear form
            loadCategories(); // Reload table
        } else {
            const errorData = await response.json(); // Try to parse error details from backend
            showAlert(`Error: ${errorData.message || response.statusText || 'Failed to add category'}`, 'danger');
            console.error('Error response:', errorData);
        }
    } catch (error) {
        console.error('Network error or server unreachable:', error);
        showAlert(`Network error: ${error.message}`, 'danger');
    }
}

// Opens the edit modal and populates it with category data from backend
async function editCategory(categoryId) {
    try {
        const token = localStorage.getItem('adminToken'); // Get token for auth
        const response = await fetch(`${API_BASE_URL}/admin/${categoryId}`, { // GET endpoint for single category
            headers: {
                'Authorization': `Bearer ${token}` // Include JWT token
            }
        });

        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`Failed to fetch category for edit: ${response.status} - ${errorText}`);
        }
        const category = await response.json();

        // Populate edit form fields
        editCategoryIdInput.value = category.id;
        editCategoryNameInput.value = category.name;
        editCategorySlugInput.value = category.slug;
        editCategoryDescriptionInput.value = category.description || ''; // Handle null/undefined description
        editCategoryStatusSelect.value = category.status; // Set status dropdown (already matches casing)

        editCategoryModal.style.display = 'block'; // Show modal
    } catch (error) {
        console.error('Error editing category:', error);
        showAlert(`Error loading category for edit: ${error.message}`, 'danger');
    }
}

// Updates an existing category via backend API
async function updateCategory() {
    const id = editCategoryIdInput.value;
    const name = editCategoryNameInput.value.trim();
    const slug = editCategorySlugInput.value.trim();
    const description = editCategoryDescriptionInput.value.trim();
    const status = editCategoryStatusSelect.value;

    if (!name || !id) {
        showAlert('Category ID and Name are required for update.', 'danger');
        return;
    }

    const categoryData = {
        name: name,
        slug: slug || null, // Send null if slug is empty
        description: description,
        status: status // Already in correct casing from HTML select options
    };

    try {
        const token = localStorage.getItem('adminToken'); // Get token for auth
        const response = await fetch(`${API_BASE_URL}/admin/${id}`, { // PUT endpoint for updating category
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}` // Include JWT token
            },
            body: JSON.stringify(categoryData)
        });

        if (response.ok) {
            const updatedCategory = await response.json();
            showAlert(`Category "${updatedCategory.name}" updated successfully!`, 'success');
            editCategoryModal.style.display = 'none'; // Close modal
            loadCategories(); // Reload table
        } else {
            const errorData = await response.json();
            showAlert(`Error: ${errorData.message || response.statusText || 'Failed to update category'}`, 'danger');
            console.error('Error response:', errorData);
        }
    } catch (error) {
        console.error('Network error or server unreachable:', error);
        showAlert(`Network error: ${error.message}`, 'danger');
    }
}

// Deletes a category via backend API
async function deleteCategory(categoryId) {
    if (!confirm('Are you sure you want to delete this category? This action cannot be undone.')) {
        return;
    }

    try {
        const token = localStorage.getItem('adminToken'); // Get token for auth
        const response = await fetch(`${API_BASE_URL}/admin/${categoryId}`, { // DELETE endpoint for deleting category
            method: 'DELETE',
            headers: {
                'Authorization': `Bearer ${token}` // Include JWT token
            }
        });

        if (response.ok) {
            showAlert('Category deleted successfully!', 'success');
            loadCategories(); // Reload table
        } else {
            const errorData = await response.json();
            showAlert(`Error: ${errorData.message || response.statusText || 'Failed to delete category'}`, 'danger');
            console.error('Error response:', errorData);
        }
    } catch (error) {
        console.error('Network error or server unreachable:', error);
        showAlert(`Network error: ${error.message}`, 'danger');
    }
}

// Helper function to show alerts
function showAlert(message, type) {
    const alert = document.createElement('div');
    alert.className = `alert alert-${type}`; // Assumes you have CSS for .alert .alert-success .alert-danger
    alert.textContent = message;
    alertContainer.innerHTML = ''; // Clear previous alerts
    alertContainer.appendChild(alert);

    setTimeout(() => {
        alert.remove();
    }, 5000); // Alert disappears after 5 seconds
}

// Helper function to generate a URL-friendly slug
function generateSlug(name) {
    return name.toLowerCase()
               .replace(/[^a-z0-9\s-]/g, '') // Remove non-alphanumeric, keep spaces and hyphens
               .replace(/\s+/g, '-')       // Replace spaces with hyphens
               .replace(/^-+|-+$/g, '');    // Trim hyphens from start/end
}

// --- Admin JWT Authentication Check (Keep your existing check) ---
const token = localStorage.getItem('adminToken');
if (!token) {
    alert('Please login first to access the page.');
    window.location.href = '/admin_panel/admin-login.html'; // Corrected path if needed
    // Stop execution if not authenticated
    throw new Error('Unauthorized access. Redirecting to login.');
}